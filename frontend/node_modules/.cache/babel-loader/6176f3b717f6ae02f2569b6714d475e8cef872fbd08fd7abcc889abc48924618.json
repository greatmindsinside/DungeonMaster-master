{"ast":null,"code":"import axios from \"axios\";\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY;\nexport const getOpenAIResponse = async prompt => {\n  const response = await axios.post(\"https://api.openai.com/v1/completions\", {\n    model: \"text-davinci-003\",\n    prompt: prompt,\n    max_tokens: 100\n  }, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`\n    }\n  });\n  return response.data.choices[0].text;\n};\nexport const generateImage = async prompt => {\n  const response = await axios.post(\"https://api.openai.com/v1/images/generations\", {\n    prompt: prompt,\n    n: 1,\n    // number of images to generate\n    size: \"512x512\" // can be 256x256, 512x512, or 1024x1024\n  }, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`\n    }\n  });\n  return response.data.data[0].url; // returns the URL of the generated image\n};","map":{"version":3,"names":["axios","apiKey","process","env","REACT_APP_OPENAI_API_KEY","getOpenAIResponse","prompt","response","post","model","max_tokens","headers","Authorization","data","choices","text","generateImage","n","size","url"],"sources":["C:/Users/GreatMindsInside/Desktop/TextAdventureInC/DungeonMaster-master/src/openaiService.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n\r\nexport const getOpenAIResponse = async (prompt: string) => {\r\n  const response = await axios.post(\r\n    \"https://api.openai.com/v1/completions\",\r\n    {\r\n      model: \"text-davinci-003\",\r\n      prompt: prompt,\r\n      max_tokens: 100,\r\n    },\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data.choices[0].text;\r\n};\r\n\r\nexport const generateImage = async (prompt: string) => {\r\n  const response = await axios.post(\r\n    \"https://api.openai.com/v1/images/generations\",\r\n    {\r\n      prompt: prompt,\r\n      n: 1, // number of images to generate\r\n      size: \"512x512\", // can be 256x256, 512x512, or 1024x1024\r\n    },\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data.data[0].url; // returns the URL of the generated image\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAEnD,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,MAAc,IAAK;EACzD,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAC/B,uCAAuC,EACvC;IACEC,KAAK,EAAE,kBAAkB;IACzBH,MAAM,EAAEA,MAAM;IACdI,UAAU,EAAE;EACd,CAAC,EACD;IACEC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUX,MAAM;IACjC;EACF,CACF,CAAC;EACD,OAAOM,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;AACtC,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAOV,MAAc,IAAK;EACrD,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAC/B,8CAA8C,EAC9C;IACEF,MAAM,EAAEA,MAAM;IACdW,CAAC,EAAE,CAAC;IAAE;IACNC,IAAI,EAAE,SAAS,CAAE;EACnB,CAAC,EACD;IACEP,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUX,MAAM;IACjC;EACF,CACF,CAAC;EACD,OAAOM,QAAQ,CAACM,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACM,GAAG,CAAC,CAAC;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}