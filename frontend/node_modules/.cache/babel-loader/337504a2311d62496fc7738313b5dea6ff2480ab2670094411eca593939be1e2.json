{"ast":null,"code":"export const generateImage = async prompt => {\n  try {\n    const response = await fetch(\"http://localhost:5000/generate-image\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        prompt\n      }) // Send the prompt to the backend\n    });\n    if (!response.ok) {\n      throw new Error(\"Image generation failed\");\n    }\n    const data = await response.json();\n    return data; // The backend should return the base64 image\n  } catch (error) {\n    console.error(\"Error generating image:\", error);\n    return null;\n  }\n};","map":{"version":3,"names":["generateImage","prompt","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console"],"sources":["C:/DungeonMaster-master/frontend/src/openaiService.ts"],"sourcesContent":["export const generateImage = async (prompt) => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/generate-image\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ prompt }), // Send the prompt to the backend\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Image generation failed\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data; // The backend should return the base64 image\r\n  } catch (error) {\r\n    console.error(\"Error generating image:\", error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;MACnEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAO,CAAC,CAAC,CAAE;IACpC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}