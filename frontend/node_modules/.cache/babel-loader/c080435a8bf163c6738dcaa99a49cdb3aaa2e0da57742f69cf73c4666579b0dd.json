{"ast":null,"code":"import axios from \"axios\";\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY;\nexport const getOpenAIResponse = async prompt => {\n  const response = await axios.post(\"https://api.openai.com/v1/completions\", {\n    model: \"text-davinci-003\",\n    prompt: prompt,\n    max_tokens: 100\n  }, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`\n    }\n  });\n  return response.data.choices[0].text;\n};\nexport const generateImage = async prompt => {\n  try {\n    const response = await axios.post(\"https://api.openai.com/v1/images/generations\", {\n      prompt: prompt,\n      n: 1,\n      size: \"512x512\"\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      }\n    });\n    return response.data.data[0].url;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Error generating image:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","apiKey","process","env","REACT_APP_OPENAI_API_KEY","getOpenAIResponse","prompt","response","post","model","max_tokens","headers","Authorization","data","choices","text","generateImage","n","size","url","error","_error$response","console","message"],"sources":["C:/Users/GreatMindsInside/Desktop/TextAdventureInC/DungeonMaster-master/src/openaiService.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n\r\nexport const getOpenAIResponse = async (prompt: string) => {\r\n  const response = await axios.post(\r\n    \"https://api.openai.com/v1/completions\",\r\n    {\r\n      model: \"text-davinci-003\",\r\n      prompt: prompt,\r\n      max_tokens: 100,\r\n    },\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${apiKey}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data.choices[0].text;\r\n};\r\n\r\nexport const generateImage = async (prompt: string) => {\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://api.openai.com/v1/images/generations\",\r\n      {\r\n        prompt: prompt,\r\n        n: 1,\r\n        size: \"512x512\",\r\n      },\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${apiKey}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data.data[0].url;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error generating image:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;AAEnD,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,MAAc,IAAK;EACzD,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAC/B,uCAAuC,EACvC;IACEC,KAAK,EAAE,kBAAkB;IACzBH,MAAM,EAAEA,MAAM;IACdI,UAAU,EAAE;EACd,CAAC,EACD;IACEC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUX,MAAM;IACjC;EACF,CACF,CAAC;EACD,OAAOM,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;AACtC,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAOV,MAAc,IAAK;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAC/B,8CAA8C,EAC9C;MACEF,MAAM,EAAEA,MAAM;MACdW,CAAC,EAAE,CAAC;MACJC,IAAI,EAAE;IACR,CAAC,EACD;MACEP,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUX,MAAM;MACjC;IACF,CACF,CAAC;IACD,OAAOM,QAAQ,CAACM,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACM,GAAG;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACdC,OAAO,CAACF,KAAK,CACX,yBAAyB,EACzB,EAAAC,eAAA,GAAAD,KAAK,CAACb,QAAQ,cAAAc,eAAA,uBAAdA,eAAA,CAAgBR,IAAI,KAAIO,KAAK,CAACG,OAChC,CAAC;IACD,MAAMH,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}